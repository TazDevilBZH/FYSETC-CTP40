#!/usr/bin/env python3
import time
import RPi.GPIO as GPIO

CLK = 27
MOSI = 26
CS = 18


def setup_pins():
    GPIO.setmode(GPIO.BCM)
    GPIO.setup([CLK, MOSI, CS], GPIO.OUT)
    GPIO.output(CS, GPIO.HIGH)


def clock_tick():
    time.sleep(0.00001)
    GPIO.output(CLK, GPIO.LOW)
    time.sleep(0.00001)
    GPIO.output(CLK, GPIO.HIGH)
    time.sleep(0.00001)


def write_bit(v):
    GPIO.output(MOSI, GPIO.LOW if v == 0 else GPIO.HIGH)
    clock_tick()


def write_byte(v):
    for x in range(0, 8):
        write_bit(v & (0b10000000 >> x))


def write_register(register, data):
    if not isinstance(data, list):
        data = [data]
    GPIO.output(CS, GPIO.LOW)
    write_bit(0)  # register select
    write_byte(register)
    for i in range(0, len(data)):
        write_bit(1)  # register write
        write_byte(data[i])
    GPIO.output(CS, GPIO.HIGH)


def select_page(number):
    write_register(0xFF, [0xFF, 0x98, 0x06, 0x04, number])


def soft_reset():
    select_page(0)
    write_register(0x01, 0x00)
    time.sleep(0.2)


def setup_lcd():
    # soft_reset()
    select_page(1)
    # interface mode
    # SEPT_SDIO = 0 (spi interface transfer through SDA pin)
    # SDO_STATUS = 1 (always output, but without output tri-state)
    write_register(0x08, 0x10)
    # display control
    # VSPL = 1 (vertical sync polarity)
    # HSPL = 0 (horizontal sync polarity)
    # DPL = 0 (PCLK polarity)
    # EPL = 1 (data enable polarity)
    write_register(0x21, 0x0D)
    # resolution control (0x02 = 480x800)
    write_register(0x30, 0x02)
    # display inversion control (0x00 = column inversion)
    write_register(0x31, 0x00)
    # power control
    # EXB1T = 0 (internal charge pump)
    # EXT_CPCK_SEL = 1 (pump clock control signal = output 2 x waveform)
    # BT = 0 (DDVDH / DDVDL voltage = VCI x 2 / VCI x -2)
    write_register(0x40, 0x10)
    # power control
    # DDVDH_CLP = 5.6 (DDVDH clamp leve)
    # DDVDL_CLP = -5.6 (DDVDL clamp leve)
    write_register(0x41, 0x55)
    # power control
    # VGH_CP = 2DDVDH - DDVDL (step up factor for VGH)
    # VGL_CP = DDVDL + VCL - VCIP (step up factor for VGL)
    write_register(0x42, 0x02)
    # power control
    # VGH_CLPEN = 0 (disable VGH clamp level)
    # VGH_CLP = 9 (15.0 VGH clamp level - but this is disabled so not used?)
    write_register(0x43, 0x84)
    # power control
    # VGL_CLPEN = 0 (disable VGL clamp level)
    # VGL_CLP = 9 (-11.0 VGL clamp level - but this is disabled so not used?)
    write_register(0x44, 0x84)

    # power control
    # VREG1OUT voltage for positive gamma?
    write_register(0x50, 0x78)
    # power control
    # VREG2OUT voltage for negative gamma?
    write_register(0x51, 0x78)

    # power control
    # VCOM control
    write_register(0x52, 0x00)
    write_register(0x53, 0x77)  # doesn't match sample code
    write_register(0x57, 0x60)  # in sample code, but not in our original code
    # source timing adjust
    # source SDT timing adjustment (0-63 time scales)
    write_register(0x60, 0x07)
    # source timing adjust
    # source CR timing adjustment (0-63 time scales)
    write_register(0x61, 0x00)
    # source timing adjust
    # source EQ timing adjustment (0-63 time scales)
    write_register(0x62, 0x08)

    # source timing adjust
    # source PC timing adjustment (0-63 time scales)
    write_register(0x63, 0x00)
    # positive gamma control
    # set the gray scale voltage to adjust the gamma characteristics of the panel
    write_register(0xA0, 0x00)
    write_register(0xA1, 0x07)
    write_register(0xA2, 0x0C)
    write_register(0xA3, 0x0B)
    write_register(0xA4, 0x03)
    write_register(0xA5, 0x07)
    write_register(0xA6, 0x06)
    write_register(0xA7, 0x04)
    write_register(0xA8, 0x08)
    write_register(0xA9, 0x0C)
    write_register(0xAA, 0x13)
    write_register(0xAB, 0x06)
    write_register(0xAC, 0x0D)
    write_register(0xAD, 0x19)
    write_register(0xAE, 0x10)
    write_register(0xAF, 0x00)
    # negative gamma control
    # set the gray scale voltage to adjust the gamma characteristics of the panel
    write_register(0xC0, 0x00)
    write_register(0xC1, 0x07)
    write_register(0xC2, 0x0C)
    write_register(0xC3, 0x0B)
    write_register(0xC4, 0x03)
    write_register(0xC5, 0x07)
    write_register(0xC6, 0x07)
    write_register(0xC7, 0x04)
    write_register(0xC8, 0x08)
    write_register(0xC9, 0x0C)
    write_register(0xCA, 0x13)
    write_register(0xCB, 0x06)
    write_register(0xCC, 0x0D)
    write_register(0xCD, 0x18)
    write_register(0xCE, 0x10)
    write_register(0xCF, 0x00)
    select_page(6)
    # GIP setting
    write_register(0x00, 0x20)
    write_register(0x01, 0x0A)
    write_register(0x02, 0x00)
    write_register(0x03, 0x00)
    write_register(0x04, 0x01)
    write_register(0x05, 0x01)
    write_register(0x06, 0x98)
    write_register(0x07, 0x06)
    write_register(0x08, 0x01)
    write_register(0x09, 0x80)
    write_register(0x0A, 0x00)
    write_register(0x0B, 0x00)
    write_register(0x0C, 0x01)
    write_register(0x0D, 0x01)
    write_register(0x0E, 0x00)
    write_register(0x0F, 0x00)
    write_register(0x10, 0xF0)
    write_register(0x11, 0xF4)
    write_register(0x12, 0x01)
    write_register(0x13, 0x00)
    write_register(0x14, 0x00)
    write_register(0x15, 0xC0)
    write_register(0x16, 0x08)
    write_register(0x17, 0x00)
    write_register(0x18, 0x00)
    write_register(0x19, 0x00)
    write_register(0x1A, 0x00)
    write_register(0x1B, 0x00)
    write_register(0x1C, 0x00)
    write_register(0x1D, 0x00)
    write_register(0x20, 0x01)
    write_register(0x21, 0x23)
    write_register(0x22, 0x45)
    write_register(0x23, 0x67)
    write_register(0x24, 0x01)
    write_register(0x25, 0x23)
    write_register(0x26, 0x45)
    write_register(0x27, 0x67)
    write_register(0x30, 0x11)
    write_register(0x31, 0x11)
    write_register(0x32, 0x00)
    write_register(0x33, 0xEE)
    write_register(0x34, 0xFF)
    write_register(0x35, 0xBB)
    write_register(0x36, 0xAA)
    write_register(0x37, 0xDD)
    write_register(0x38, 0xCC)
    write_register(0x39, 0x66)
    write_register(0x3A, 0x77)
    write_register(0x3B, 0x22)
    write_register(0x3C, 0x22)
    write_register(0x3D, 0x22)
    write_register(0x3E, 0x22)
    write_register(0x3F, 0x22)
    write_register(0x40, 0x22)
    write_register(0x52, 0x10)  # register doesn't exist on page 6?
    write_register(0x53, 0x10)  # doesn't make sense, not valid according to datasheet
    write_register(0x54, 0x13)  # doesn't make sense, not valid according to datasheet
    select_page(7)
    # enable VREG
    write_register(0x18, 0x1D)
    # enable VGL_REG
    write_register(0x17, 0x22)
    write_register(0x02, 0x77)  # register doesn't exist on page 7?
    write_register(0x26, 0xB2)  # register doesn't exist on page 7?
    write_register(0xE1, 0x79)  # register doesn't exist on page 7?
    select_page(0)
    # set pixel format
    # DPI = 18-bits per pixel
    write_register(0x3A, 0x60)
    # set tearing line effect
    # turns on the TE (tearing effect) output signal
    write_register(0x35, 0x00)
    # turn off sleep mode
    write_register(0x11, 0x00)

    time.sleep(0.2)
    # turn the display on
    write_register(0x29, 0x00)
    time.sleep(0.2)


if __name__ == "__main__":
    setup_pins()
    setup_lcd()
    GPIO.cleanup()
